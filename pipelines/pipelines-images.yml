# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerId: 'elvirateran'

steps:
- checkout: self

- task: Bash@3
  displayName: 'Leer lista de imágenes desde images/images-list.txt'
  inputs:
    targetType: 'inline'
    script: |
      IMAGES=$(cat images/images-list.txt)
      echo "##vso[task.setvariable variable=IMAGES]$IMAGES"

- task: Docker@2
  displayName: 'Docker login'
  inputs:
    containerRegistry: 'dockerhub'

- task: Bash@3
  displayName: 'Etiquetar y enviar imágenes a Docker Hub'
  inputs:
    targetType: 'inline'
    script: |
      for IMAGE in $(echo "$IMAGES"); do
        echo "Procesando imagen: $IMAGE"
        docker tag $IMAGE $(dockerId)/$IMAGE
        docker push $(dockerId)/$IMAGE
        sleep 10 # Espera 10 segundos entre cada push
      done

- task: Bash@3
  displayName: 'Escaneo con Trivy'
  inputs:
    targetType: 'inline'
    script: |
      for IMAGE in $(echo "$IMAGES"); do
        echo "Escaneando imagen: $IMAGE"
        trivy image --exit-code 0 --severity CRITICAL $IMAGE
        if [ $? -eq 0 ]; then
          echo "No se encontraron vulnerabilidades críticas."
        else
          echo "Se encontraron vulnerabilidades críticas."
          trivy image --format template --template "@/contrib/sarif.tpl" $IMAGE > trivy-report-$IMAGE.sarif
        fi
        sleep 5 # Espera 5 segundos entre cada escaneo
      done

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)'
    artifact: 'TrivyScanReports'
    publishLocation: 'pipeline'