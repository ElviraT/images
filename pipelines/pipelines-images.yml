# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main # O la rama que estés utilizando

pool:
  vmImage: 'ubuntu-latest' # O la imagen que prefieras

steps:
- task: GitVersion@5
  displayName: 'Obtener versión de Git'
  inputs:
    versionSpec: '5.x'

- task: Bash@3
  displayName: 'Leer lista de imágenes y procesarlas secuencialmente'
  inputs:
    targetType: 'inline'
    script: |
      # Leer la lista de imágenes desde el archivo images-list.txt
      while IFS= read -r image; do
        echo "Procesando imagen: $image"

        # Docker pull desde Docker Hub
        docker pull "$image"

        # Escaneo de imagen con Trivy
        trivy image --exit-code 0 --severity CRITICAL "$image"
        if [ $? -ne 0 ]; then
          echo "Se encontraron vulnerabilidades críticas en $image"
          # Generar reporte y notificar (puedes personalizar esto)
          trivy image --format template --template "@/contrib/sarif.tpl" -o report.sarif "$image"

          # Publicar reportes como artefactos
          - task: PublishPipelineArtifact@1
            displayName: 'Publicar Reporte Trivy'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/report.sarif'
              artifact: 'ReporteTrivy'

          exit 1
        else
          echo "No se encontraron vulnerabilidades críticas en $image"

          # Taggear imagen para el registro local
          docker tag "$image" "localhost:5000/$image:$(GitVersion.SemVer)"

          # Push de imagen al registro local
          docker push "localhost:5000/$image:$(GitVersion.SemVer)"
        fi
      done < images-list.txt