# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerId: 'elvirateran'
  imagesListFile: 'images/images-list.txt'

steps:
- checkout: self

- task: Bash@3
  displayName: 'Leer lista de imágenes y crear array IMAGES_ARRAY'
  inputs:
    targetType: 'inline'
    script: |
      IMAGES=$(cat $(imagesListFile))
      echo "##vso[task.setvariable variable=IMAGES_ARRAY]$IMAGES"

- ${{ each image in split(variables.IMAGES_ARRAY, '\n') }}:
  - task: Docker@2
    displayName: 'Docker login'
    inputs:
      containerRegistry: 'dockerhub'

  - task: Bash@3
    displayName: 'Etiquetar y enviar imagen ${{ image }} a Docker Hub'
    inputs:
      targetType: 'inline'
      script: |
        echo "Procesando imagen: ${{ image }}"
        docker tag ${{ image }} $(dockerId)/${{ image }}
        docker push $(dockerId)/${{ image }}
        sleep 10 # Espera 10 segundos

  - task: Bash@3
    displayName: 'Escaneo con Trivy de ${{ image }}'
    inputs:
      targetType: 'inline'
      script: |
        echo "Escaneando imagen: ${{ image }}"
        trivy image --exit-code 0 --severity CRITICAL ${{ image }}
        if [ $? -eq 0 ]; then
          echo "No se encontraron vulnerabilidades críticas para ${{ image }}."
        else
          echo "Se encontraron vulnerabilidades críticas para ${{ image }}."
          trivy image --format template --template "@/contrib/sarif.tpl" ${{ image }} > trivy-report-${{ image }}.sarif
        fi
        sleep 5 # Espera 5 segundos

  - task: PublishPipelineArtifact@1
    displayName: 'Publicar artefacto Trivy Scan Report de ${{ image }}'
    inputs:
      targetPath: 'trivy-report-${{ image }}.sarif'
      artifact: 'TrivyScanReport-${{ image }}'
      publishLocation: 'pipeline'